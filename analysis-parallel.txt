5.16.txt		5		6
7.13.txt		7		12
7.14.txt		7		12
13.5.txt		13		7
13.6.txt		13		7
13.11.txt		13		7
13.12.txt		13		7
13.13.txt		13		7
13.14.txt		13		3
18.3.txt		18		13
18.10.txt		18		7
18.11.txt		18		7
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		7
18.15.txt		18		7
Accuracy: 326 correct answers for 342 tests Parallel
Total runtime: 2.269798
Sequential runtime: 1.623500
Results for k=1
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 88.67      0.62     0.62    70600     0.01     0.01  find_closest
 11.44      0.70     0.08      360     0.22     0.22  read_pgm_file
  0.00      0.70     0.00     6156     0.00     0.00  distance
  0.00      0.70     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.70     0.00      360     0.00     1.71  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.43% of 0.70 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.70                 main [1]
                0.00    0.62     360/360         create_histogram [4]
                0.08    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64444       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     88.6    0.62    0.00   64444+12312   <cycle 1 as a whole> [2]
                0.62    0.00   70600             find_closest <cycle 1> [3]
                0.00    0.00    6156             distance <cycle 1> [6]
-----------------------------------------------
                                6156             distance <cycle 1> [6]
                0.00    0.00     364/64444       main [1]
                0.62    0.00   64080/64444       create_histogram [4]
[3]     88.6    0.62    0.00   70600         find_closest <cycle 1> [3]
                                6156             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.62     360/360         main [1]
[4]     88.1    0.00    0.62     360         create_histogram [4]
                0.62    0.00   64080/64444       find_closest <cycle 1> [3]
-----------------------------------------------
                0.08    0.00     360/360         main [1]
[5]     11.4    0.08    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                                6156             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00    6156         distance <cycle 1> [6]
                                6156             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
5.16.txt		5		6
7.13.txt		7		12
7.14.txt		7		12
13.5.txt		13		7
13.6.txt		13		7
13.11.txt		13		7
13.12.txt		13		7
13.13.txt		13		7
13.14.txt		13		3
18.3.txt		18		13
18.10.txt		18		7
18.11.txt		18		7
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		7
18.15.txt		18		7
Accuracy: 326 correct answers for 342 tests Parallel
Total runtime: 2.839607
Sequential runtime: 1.794600
Results for k=1
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 94.09      0.78     0.78    56495     0.01     0.01  find_closest
  6.03      0.83     0.05      360     0.14     0.14  read_pgm_file
  0.00      0.83     0.00     6156     0.00     0.00  distance
  0.00      0.83     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.83     0.00      360     0.00     2.15  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.20% of 0.83 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.83                 main [1]
                0.00    0.78     360/360         create_histogram [4]
                0.05    0.00     360/360         read_pgm_file [5]
                0.01    0.00     360/52495       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     94.0    0.78    0.00   52495+10156   <cycle 1 as a whole> [2]
                0.78    0.00   56495             find_closest <cycle 1> [3]
                0.00    0.00    6156             distance <cycle 1> [6]
-----------------------------------------------
                                4000             distance <cycle 1> [6]
                0.01    0.00     360/52495       main [1]
                0.78    0.00   52135/52495       create_histogram [4]
[3]     94.0    0.78    0.00   56495         find_closest <cycle 1> [3]
                                6156             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.78     360/360         main [1]
[4]     93.3    0.00    0.78     360         create_histogram [4]
                0.78    0.00   52135/52495       find_closest <cycle 1> [3]
-----------------------------------------------
                0.05    0.00     360/360         main [1]
[5]      6.0    0.05    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                                6156             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00    6156         distance <cycle 1> [6]
                                4000             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
5.16.txt		5		6
7.13.txt		7		12
7.14.txt		7		12
13.5.txt		13		7
13.6.txt		13		7
13.11.txt		13		7
13.12.txt		13		7
13.13.txt		13		7
13.14.txt		13		3
18.3.txt		18		13
18.10.txt		18		7
18.11.txt		18		7
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		7
18.15.txt		18		7
Accuracy: 326 correct answers for 342 tests Parallel
Total runtime: 4.149237
Sequential runtime: 2.231566
Results for k=1
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 94.09      0.78     0.78    70362     0.01     0.01  find_closest
  6.03      0.83     0.05      360     0.14     0.14  read_pgm_file
  0.00      0.83     0.00     6156     0.00     0.00  distance
  0.00      0.83     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.83     0.00      360     0.00     2.16  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.20% of 0.83 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.83                 main [1]
                0.00    0.78     360/360         create_histogram [4]
                0.05    0.00     360/360         read_pgm_file [5]
                0.00    0.00     359/64209       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     94.0    0.78    0.00   64209+12309   <cycle 1 as a whole> [2]
                0.78    0.00   70362             find_closest <cycle 1> [3]
                0.00    0.00    6156             distance <cycle 1> [6]
-----------------------------------------------
                                6153             distance <cycle 1> [6]
                0.00    0.00     359/64209       main [1]
                0.78    0.00   63850/64209       create_histogram [4]
[3]     94.0    0.78    0.00   70362         find_closest <cycle 1> [3]
                                6156             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.78     360/360         main [1]
[4]     93.5    0.00    0.78     360         create_histogram [4]
                0.78    0.00   63850/64209       find_closest <cycle 1> [3]
-----------------------------------------------
                0.05    0.00     360/360         main [1]
[5]      6.0    0.05    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                                6156             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00    6156         distance <cycle 1> [6]
                                6153             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
5.16.txt		5		6
7.13.txt		7		12
7.14.txt		7		12
13.5.txt		13		7
13.6.txt		13		7
13.11.txt		13		7
13.12.txt		13		7
13.13.txt		13		7
13.14.txt		13		3
18.3.txt		18		13
18.10.txt		18		7
18.11.txt		18		7
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		7
18.15.txt		18		7
Accuracy: 326 correct answers for 342 tests Parallel
Total runtime: 6.214798
Sequential runtime: 2.094962
Results for k=1
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.86      0.90     0.90    70193     0.01     0.01  find_closest
  3.20      0.93     0.03      360     0.08     0.08  read_pgm_file
  1.07      0.94     0.01      360     0.03     2.52  create_histogram
  0.00      0.94     0.00     6156     0.00     0.00  distance
  0.00      0.94     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.06% of 0.94 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.94                 main [1]
                0.01    0.90     360/360         create_histogram [2]
                0.03    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/64046       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    0.90     360/360         main [1]
[2]     96.3    0.01    0.90     360         create_histogram [2]
                0.90    0.00   63682/64046       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     95.7    0.90    0.00   64046+12303   <cycle 1 as a whole> [3]
                0.90    0.00   70193             find_closest <cycle 1> [4]
                0.00    0.00    6156             distance <cycle 1> [6]
-----------------------------------------------
                                6147             distance <cycle 1> [6]
                0.01    0.00     364/64046       main [1]
                0.90    0.00   63682/64046       create_histogram [2]
[4]     95.7    0.90    0.00   70193         find_closest <cycle 1> [4]
                                6156             distance <cycle 1> [6]
-----------------------------------------------
                0.03    0.00     360/360         main [1]
[5]      3.2    0.03    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                                6156             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00    6156         distance <cycle 1> [6]
                                6147             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
5.16.txt		5		6
7.13.txt		7		12
7.14.txt		7		12
13.5.txt		13		7
13.6.txt		13		7
13.11.txt		13		7
13.12.txt		13		7
13.13.txt		13		7
13.14.txt		13		3
18.3.txt		18		13
18.10.txt		18		7
18.11.txt		18		7
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		7
18.15.txt		18		7
Accuracy: 326 correct answers for 342 tests Parallel
Total runtime: 7.025056
Sequential runtime: 1.941934
Results for k=1
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.90      0.91     0.91    70458     0.01     0.01  find_closest
  3.16      0.94     0.03      360     0.08     0.08  read_pgm_file
  1.05      0.95     0.01      360     0.03     2.54  create_histogram
  0.00      0.95     0.00     6156     0.00     0.00  distance
  0.00      0.95     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.05% of 0.95 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.95                 main [1]
                0.01    0.91     360/360         create_histogram [2]
                0.03    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/64366       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    0.91     360/360         main [1]
[2]     96.3    0.01    0.91     360         create_histogram [2]
                0.91    0.00   64002/64366       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     95.8    0.91    0.00   64366+12248   <cycle 1 as a whole> [3]
                0.91    0.00   70458             find_closest <cycle 1> [4]
                0.00    0.00    6156             distance <cycle 1> [6]
-----------------------------------------------
                                6092             distance <cycle 1> [6]
                0.01    0.00     364/64366       main [1]
                0.91    0.00   64002/64366       create_histogram [2]
[4]     95.8    0.91    0.00   70458         find_closest <cycle 1> [4]
                                6156             distance <cycle 1> [6]
-----------------------------------------------
                0.03    0.00     360/360         main [1]
[5]      3.2    0.03    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                                6156             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00    6156         distance <cycle 1> [6]
                                6092             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
5.16.txt		5		6
7.13.txt		7		12
7.14.txt		7		12
13.5.txt		13		7
13.6.txt		13		7
13.11.txt		13		7
13.12.txt		13		7
13.13.txt		13		7
13.14.txt		13		3
18.3.txt		18		13
18.10.txt		18		7
18.11.txt		18		7
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		7
18.15.txt		18		7
Accuracy: 326 correct answers for 342 tests Parallel
Total runtime: 11.670910
Sequential runtime: 2.232177
Results for k=1
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 88.40      0.83     0.83    70178     0.01     0.01  find_closest
 11.72      0.94     0.11      360     0.31     0.31  read_pgm_file
  0.00      0.94     0.00     6156     0.00     0.00  distance
  0.00      0.94     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.94     0.00      360     0.00     2.30  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.06% of 0.94 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.94                 main [1]
                0.00    0.83     360/360         create_histogram [4]
                0.11    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64035       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     88.3    0.83    0.00   64035+12299   <cycle 1 as a whole> [2]
                0.83    0.00   70178             find_closest <cycle 1> [3]
                0.00    0.00    6156             distance <cycle 1> [6]
-----------------------------------------------
                                6143             distance <cycle 1> [6]
                0.00    0.00     364/64035       main [1]
                0.83    0.00   63671/64035       create_histogram [4]
[3]     88.3    0.83    0.00   70178         find_closest <cycle 1> [3]
                                6156             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.83     360/360         main [1]
[4]     87.8    0.00    0.83     360         create_histogram [4]
                0.83    0.00   63671/64035       find_closest <cycle 1> [3]
-----------------------------------------------
                0.11    0.00     360/360         main [1]
[5]     11.7    0.11    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                                6156             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00    6156         distance <cycle 1> [6]
                                6143             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
7.13.txt		7		12
7.14.txt		7		12
18.3.txt		18		13
18.9.txt		18		13
18.10.txt		18		13
18.11.txt		18		13
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		13
18.15.txt		18		13
Accuracy: 314 correct answers for 324 tests Parallel
Total runtime: 2.351695
Sequential runtime: 1.678789
Results for k=2
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 88.99      0.64     0.64    76108     0.01     0.01  find_closest
 11.12      0.72     0.08      360     0.22     0.22  read_pgm_file
  0.00      0.72     0.00    11664     0.00     0.00  distance
  0.00      0.72     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.72     0.00      360     0.00     1.77  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.39% of 0.72 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.72                 main [1]
                0.00    0.64     360/360         create_histogram [4]
                0.08    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64444       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     88.9    0.64    0.00   64444+23328   <cycle 1 as a whole> [2]
                0.64    0.00   76108             find_closest <cycle 1> [3]
                0.00    0.00   11664             distance <cycle 1> [6]
-----------------------------------------------
                               11664             distance <cycle 1> [6]
                0.00    0.00     364/64444       main [1]
                0.64    0.00   64080/64444       create_histogram [4]
[3]     88.9    0.64    0.00   76108         find_closest <cycle 1> [3]
                               11664             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.64     360/360         main [1]
[4]     88.4    0.00    0.64     360         create_histogram [4]
                0.64    0.00   64080/64444       find_closest <cycle 1> [3]
-----------------------------------------------
                0.08    0.00     360/360         main [1]
[5]     11.1    0.08    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               11664             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   11664         distance <cycle 1> [6]
                               11664             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
7.13.txt		7		12
7.14.txt		7		12
18.3.txt		18		13
18.9.txt		18		13
18.10.txt		18		13
18.11.txt		18		13
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		13
18.15.txt		18		13
Accuracy: 314 correct answers for 324 tests Parallel
Total runtime: 2.880429
Sequential runtime: 1.836621
Results for k=2
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 93.78      0.74     0.74    30754     0.02     0.02  find_closest
  6.34      0.79     0.05      360     0.14     0.14  read_pgm_file
  0.00      0.79     0.00    11664     0.00     0.00  distance
  0.00      0.79     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.79     0.00      360     0.00     2.03  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.26% of 0.79 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.79                 main [1]
                0.00    0.73     360/360         create_histogram [4]
                0.05    0.00     360/360         read_pgm_file [5]
                0.01    0.00     353/26323       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     93.7    0.74    0.00   26323+16095   <cycle 1 as a whole> [2]
                0.74    0.00   30754             find_closest <cycle 1> [3]
                0.00    0.00   11664             distance <cycle 1> [6]
-----------------------------------------------
                                4431             distance <cycle 1> [6]
                0.01    0.00     353/26323       main [1]
                0.73    0.00   25970/26323       create_histogram [4]
[3]     93.7    0.74    0.00   30754         find_closest <cycle 1> [3]
                               11664             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.73     360/360         main [1]
[4]     92.4    0.00    0.73     360         create_histogram [4]
                0.73    0.00   25970/26323       find_closest <cycle 1> [3]
-----------------------------------------------
                0.05    0.00     360/360         main [1]
[5]      6.3    0.05    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               11664             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   11664         distance <cycle 1> [6]
                                4431             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
7.13.txt		7		12
7.14.txt		7		12
18.3.txt		18		13
18.9.txt		18		13
18.10.txt		18		13
18.11.txt		18		13
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		13
18.15.txt		18		13
Accuracy: 314 correct answers for 324 tests Parallel
Total runtime: 4.558921
Sequential runtime: 2.002679
Results for k=2
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 96.58      0.82     0.82    74523     0.01     0.01  find_closest
  3.53      0.85     0.03      360     0.08     0.08  read_pgm_file
  0.00      0.85     0.00    11664     0.00     0.00  distance
  0.00      0.85     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.85     0.00      360     0.00     2.27  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.18% of 0.85 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.85                 main [1]
                0.00    0.82     360/360         create_histogram [4]
                0.03    0.00     360/360         read_pgm_file [5]
                0.00    0.00     352/62916       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     96.5    0.82    0.00   62916+23271   <cycle 1 as a whole> [2]
                0.82    0.00   74523             find_closest <cycle 1> [3]
                0.00    0.00   11664             distance <cycle 1> [6]
-----------------------------------------------
                               11607             distance <cycle 1> [6]
                0.00    0.00     352/62916       main [1]
                0.82    0.00   62564/62916       create_histogram [4]
[3]     96.5    0.82    0.00   74523         find_closest <cycle 1> [3]
                               11664             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.82     360/360         main [1]
[4]     95.9    0.00    0.82     360         create_histogram [4]
                0.82    0.00   62564/62916       find_closest <cycle 1> [3]
-----------------------------------------------
                0.03    0.00     360/360         main [1]
[5]      3.5    0.03    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               11664             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   11664         distance <cycle 1> [6]
                               11607             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
7.13.txt		7		12
7.14.txt		7		12
18.3.txt		18		13
18.9.txt		18		13
18.10.txt		18		13
18.11.txt		18		13
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		13
18.15.txt		18		13
Accuracy: 314 correct answers for 324 tests Parallel
Total runtime: 6.432731
Sequential runtime: 2.018753
Results for k=2
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.01      0.93     0.93    75550     0.01     0.01  find_closest
  5.11      0.98     0.05      360     0.14     0.14  read_pgm_file
  0.00      0.98     0.00    11664     0.00     0.00  distance
  0.00      0.98     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.98     0.00      360     0.00     2.57  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.02% of 0.98 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.98                 main [1]
                0.00    0.93     360/360         create_histogram [4]
                0.05    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/63923       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     94.9    0.93    0.00   63923+23291   <cycle 1 as a whole> [2]
                0.93    0.00   75550             find_closest <cycle 1> [3]
                0.00    0.00   11664             distance <cycle 1> [6]
-----------------------------------------------
                               11627             distance <cycle 1> [6]
                0.01    0.00     364/63923       main [1]
                0.93    0.00   63559/63923       create_histogram [4]
[3]     94.9    0.93    0.00   75550         find_closest <cycle 1> [3]
                               11664             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.93     360/360         main [1]
[4]     94.4    0.00    0.93     360         create_histogram [4]
                0.93    0.00   63559/63923       find_closest <cycle 1> [3]
-----------------------------------------------
                0.05    0.00     360/360         main [1]
[5]      5.1    0.05    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               11664             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   11664         distance <cycle 1> [6]
                               11627             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
7.13.txt		7		12
7.14.txt		7		12
18.3.txt		18		13
18.9.txt		18		13
18.10.txt		18		13
18.11.txt		18		13
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		13
18.15.txt		18		13
Accuracy: 314 correct answers for 324 tests Parallel
Total runtime: 7.366302
Sequential runtime: 1.899650
Results for k=2
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 94.68      0.87     0.87    76011     0.01     0.01  find_closest
  3.26      0.90     0.03      360     0.08     0.08  read_pgm_file
  2.18      0.92     0.02      360     0.06     2.46  create_histogram
  0.00      0.92     0.00    11664     0.00     0.00  distance
  0.00      0.92     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.09% of 0.92 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.92                 main [1]
                0.02    0.87     360/360         create_histogram [2]
                0.03    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64377       find_closest <cycle 1> [4]
-----------------------------------------------
                0.02    0.87     360/360         main [1]
[2]     96.2    0.02    0.87     360         create_histogram [2]
                0.87    0.00   64013/64377       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     94.6    0.87    0.00   64377+23298   <cycle 1 as a whole> [3]
                0.87    0.00   76011             find_closest <cycle 1> [4]
                0.00    0.00   11664             distance <cycle 1> [6]
-----------------------------------------------
                               11634             distance <cycle 1> [6]
                0.00    0.00     364/64377       main [1]
                0.87    0.00   64013/64377       create_histogram [2]
[4]     94.6    0.87    0.00   76011         find_closest <cycle 1> [4]
                               11664             distance <cycle 1> [6]
-----------------------------------------------
                0.03    0.00     360/360         main [1]
[5]      3.3    0.03    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               11664             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   11664         distance <cycle 1> [6]
                               11634             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
7.13.txt		7		12
7.14.txt		7		12
18.3.txt		18		13
18.9.txt		18		13
18.10.txt		18		13
18.11.txt		18		13
18.12.txt		18		7
18.13.txt		18		7
18.14.txt		18		13
18.15.txt		18		13
Accuracy: 314 correct answers for 324 tests Parallel
Total runtime: 12.571801
Sequential runtime: 2.093388
Results for k=2
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 97.02      0.94     0.94    75744     0.01     0.01  find_closest
  2.06      0.96     0.02      360     0.06     0.06  read_pgm_file
  1.03      0.97     0.01      360     0.03     2.63  create_histogram
  0.00      0.97     0.00    11664     0.00     0.00  distance
  0.00      0.97     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.03% of 0.97 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.97                 main [1]
                0.01    0.94     360/360         create_histogram [2]
                0.02    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/64107       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    0.94     360/360         main [1]
[2]     97.4    0.01    0.94     360         create_histogram [2]
                0.94    0.00   63743/64107       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     96.9    0.94    0.00   64107+23301   <cycle 1 as a whole> [3]
                0.94    0.00   75744             find_closest <cycle 1> [4]
                0.00    0.00   11664             distance <cycle 1> [6]
-----------------------------------------------
                               11637             distance <cycle 1> [6]
                0.01    0.00     364/64107       main [1]
                0.94    0.00   63743/64107       create_histogram [2]
[4]     96.9    0.94    0.00   75744         find_closest <cycle 1> [4]
                               11664             distance <cycle 1> [6]
-----------------------------------------------
                0.02    0.00     360/360         main [1]
[5]      2.1    0.02    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               11664             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   11664         distance <cycle 1> [6]
                               11637             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
18.15.txt		18		13
Accuracy: 269 correct answers for 270 tests Parallel
Total runtime: 2.407417
Sequential runtime: 1.659064
Results for k=5
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.05      0.75     0.75    88744     0.01     0.01  find_closest
  5.07      0.79     0.04      360     0.11     0.11  read_pgm_file
  0.00      0.79     0.00    24300     0.00     0.00  distance
  0.00      0.79     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.79     0.00      360     0.00     2.07  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.26% of 0.79 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.79                 main [1]
                0.00    0.75     360/360         create_histogram [4]
                0.04    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64444       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     94.9    0.75    0.00   64444+48600   <cycle 1 as a whole> [2]
                0.75    0.00   88744             find_closest <cycle 1> [3]
                0.00    0.00   24300             distance <cycle 1> [6]
-----------------------------------------------
                               24300             distance <cycle 1> [6]
                0.00    0.00     364/64444       main [1]
                0.75    0.00   64080/64444       create_histogram [4]
[3]     94.9    0.75    0.00   88744         find_closest <cycle 1> [3]
                               24300             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.75     360/360         main [1]
[4]     94.4    0.00    0.75     360         create_histogram [4]
                0.75    0.00   64080/64444       find_closest <cycle 1> [3]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      5.1    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               24300             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   24300         distance <cycle 1> [6]
                               24300             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
18.15.txt		18		13
Accuracy: 269 correct answers for 270 tests Parallel
Total runtime: 3.083041
Sequential runtime: 1.862217
Results for k=5
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.94      0.92     0.92    38206     0.02     0.02  find_closest
  3.13      0.95     0.03      360     0.08     0.08  read_pgm_file
  1.04      0.96     0.01      360     0.03     2.55  create_histogram
  0.00      0.96     0.00    24300     0.00     0.00  distance
  0.00      0.96     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.04% of 0.96 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.96                 main [1]
                0.01    0.91     360/360         create_histogram [4]
                0.03    0.00     360/360         read_pgm_file [5]
                0.01    0.00     335/27261       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     95.8    0.92    0.00   27261+35245   <cycle 1 as a whole> [2]
                0.92    0.00   38206             find_closest <cycle 1> [3]
                0.00    0.00   24300             distance <cycle 1> [6]
-----------------------------------------------
                               10945             distance <cycle 1> [6]
                0.01    0.00     335/27261       main [1]
                0.91    0.00   26926/27261       create_histogram [4]
[3]     95.8    0.92    0.00   38206         find_closest <cycle 1> [3]
                               24300             distance <cycle 1> [6]
-----------------------------------------------
                0.01    0.91     360/360         main [1]
[4]     95.7    0.01    0.91     360         create_histogram [4]
                0.91    0.00   26926/27261       find_closest <cycle 1> [3]
-----------------------------------------------
                0.03    0.00     360/360         main [1]
[5]      3.1    0.03    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               24300             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   24300         distance <cycle 1> [6]
                               10945             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
18.15.txt		18		13
Accuracy: 269 correct answers for 270 tests Parallel
Total runtime: 4.654064
Sequential runtime: 2.187046
Results for k=5
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 92.83      1.02     1.02    74701     0.01     0.01  find_closest
  7.28      1.10     0.08      360     0.22     0.22  read_pgm_file
  0.00      1.10     0.00    24300     0.00     0.00  distance
  0.00      1.10     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      1.10     0.00      360     0.00     2.82  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.91% of 1.10 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.10                 main [1]
                0.00    1.01     360/360         create_histogram [4]
                0.08    0.00     360/360         read_pgm_file [5]
                0.01    0.00     332/51677       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     92.7    1.02    0.00   51677+47324   <cycle 1 as a whole> [2]
                1.02    0.00   74701             find_closest <cycle 1> [3]
                0.00    0.00   24300             distance <cycle 1> [6]
-----------------------------------------------
                               23024             distance <cycle 1> [6]
                0.01    0.00     332/51677       main [1]
                1.01    0.00   51345/51677       create_histogram [4]
[3]     92.7    1.02    0.00   74701         find_closest <cycle 1> [3]
                               24300             distance <cycle 1> [6]
-----------------------------------------------
                0.00    1.01     360/360         main [1]
[4]     92.1    0.00    1.01     360         create_histogram [4]
                1.01    0.00   51345/51677       find_closest <cycle 1> [3]
-----------------------------------------------
                0.08    0.00     360/360         main [1]
[5]      7.3    0.08    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               24300             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   24300         distance <cycle 1> [6]
                               23024             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
18.15.txt		18		13
Accuracy: 269 correct answers for 270 tests Parallel
Total runtime: 7.669008
Sequential runtime: 2.271322
Results for k=5
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 90.46      1.03     1.03    88164     0.01     0.01  find_closest
  8.78      1.13     0.10      360     0.28     0.28  read_pgm_file
  0.88      1.14     0.01      360     0.03     2.88  create_histogram
  0.00      1.14     0.00    24300     0.00     0.00  distance
  0.00      1.14     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.88% of 1.14 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.14                 main [1]
                0.01    1.03     360/360         create_histogram [2]
                0.10    0.00     360/360         read_pgm_file [5]
                0.01    0.00     363/63961       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    1.03     360/360         main [1]
[2]     90.7    0.01    1.03     360         create_histogram [2]
                1.03    0.00   63598/63961       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     90.4    1.03    0.00   63961+48503   <cycle 1 as a whole> [3]
                1.03    0.00   88164             find_closest <cycle 1> [4]
                0.00    0.00   24300             distance <cycle 1> [6]
-----------------------------------------------
                               24203             distance <cycle 1> [6]
                0.01    0.00     363/63961       main [1]
                1.03    0.00   63598/63961       create_histogram [2]
[4]     90.4    1.03    0.00   88164         find_closest <cycle 1> [4]
                               24300             distance <cycle 1> [6]
-----------------------------------------------
                0.10    0.00     360/360         main [1]
[5]      8.8    0.10    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               24300             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   24300         distance <cycle 1> [6]
                               24203             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
18.15.txt		18		13
Accuracy: 269 correct answers for 270 tests Parallel
Total runtime: 8.597781
Sequential runtime: 1.976907
Results for k=5
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 96.66      1.12     1.12    88597     0.01     0.01  find_closest
  3.45      1.16     0.04      360     0.11     0.11  read_pgm_file
  0.00      1.16     0.00    24300     0.00     0.00  distance
  0.00      1.16     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      1.16     0.00      360     0.00     3.10  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.86% of 1.16 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.16                 main [1]
                0.00    1.11     360/360         create_histogram [4]
                0.04    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/64393       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     96.6    1.12    0.00   64393+48504   <cycle 1 as a whole> [2]
                1.12    0.00   88597             find_closest <cycle 1> [3]
                0.00    0.00   24300             distance <cycle 1> [6]
-----------------------------------------------
                               24204             distance <cycle 1> [6]
                0.01    0.00     364/64393       main [1]
                1.11    0.00   64029/64393       create_histogram [4]
[3]     96.6    1.12    0.00   88597         find_closest <cycle 1> [3]
                               24300             distance <cycle 1> [6]
-----------------------------------------------
                0.00    1.11     360/360         main [1]
[4]     96.0    0.00    1.11     360         create_histogram [4]
                1.11    0.00   64029/64393       find_closest <cycle 1> [3]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      3.4    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               24300             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   24300         distance <cycle 1> [6]
                               24204             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
18.15.txt		18		13
Accuracy: 269 correct answers for 270 tests Parallel
Total runtime: 15.286783
Sequential runtime: 2.308772
Results for k=5
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 89.19      0.98     0.98    88257     0.01     0.01  find_closest
 10.01      1.09     0.11      360     0.31     0.31  read_pgm_file
  0.91      1.10     0.01      360     0.03     2.74  create_histogram
  0.00      1.10     0.00    24300     0.00     0.00  distance
  0.00      1.10     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.91% of 1.10 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.10                 main [1]
                0.01    0.98     360/360         create_histogram [2]
                0.11    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/64097       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    0.98     360/360         main [1]
[2]     89.5    0.01    0.98     360         create_histogram [2]
                0.98    0.00   63733/64097       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     89.1    0.98    0.00   64097+48460   <cycle 1 as a whole> [3]
                0.98    0.00   88257             find_closest <cycle 1> [4]
                0.00    0.00   24300             distance <cycle 1> [6]
-----------------------------------------------
                               24160             distance <cycle 1> [6]
                0.01    0.00     364/64097       main [1]
                0.98    0.00   63733/64097       create_histogram [2]
[4]     89.1    0.98    0.00   88257         find_closest <cycle 1> [4]
                               24300             distance <cycle 1> [6]
-----------------------------------------------
                0.11    0.00     360/360         main [1]
[5]     10.0    0.11    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               24300             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   24300         distance <cycle 1> [6]
                               24160             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
18.15.txt		18		13
Accuracy: 233 correct answers for 234 tests Parallel
Total runtime: 2.595106
Sequential runtime: 1.779546
Results for k=7
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 89.76      0.78     0.78    93928     0.01     0.01  find_closest
 10.36      0.87     0.09      360     0.25     0.25  read_pgm_file
  0.00      0.87     0.00    29484     0.00     0.00  distance
  0.00      0.87     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.87     0.00      360     0.00     2.16  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.15% of 0.87 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.87                 main [1]
                0.00    0.78     360/360         create_histogram [4]
                0.09    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64444       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     89.7    0.78    0.00   64444+58968   <cycle 1 as a whole> [2]
                0.78    0.00   93928             find_closest <cycle 1> [3]
                0.00    0.00   29484             distance <cycle 1> [6]
-----------------------------------------------
                               29484             distance <cycle 1> [6]
                0.00    0.00     364/64444       main [1]
                0.78    0.00   64080/64444       create_histogram [4]
[3]     89.7    0.78    0.00   93928         find_closest <cycle 1> [3]
                               29484             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.78     360/360         main [1]
[4]     89.1    0.00    0.78     360         create_histogram [4]
                0.78    0.00   64080/64444       find_closest <cycle 1> [3]
-----------------------------------------------
                0.09    0.00     360/360         main [1]
[5]     10.3    0.09    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               29484             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   29484         distance <cycle 1> [6]
                               29484             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
18.15.txt		18		13
Accuracy: 233 correct answers for 234 tests Parallel
Total runtime: 3.492720
Sequential runtime: 1.970916
Results for k=7
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 96.01      1.17     1.17    75537     0.02     0.02  find_closest
  2.46      1.20     0.03      360     0.08     0.08  read_pgm_file
  0.82      1.21     0.01    29484     0.00     0.00  distance
  0.82      1.22     0.01                             main
  0.00      1.22     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      1.22     0.00      360     0.00     3.26  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.82% of 1.22 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.01    1.21                 main [1]
                0.00    1.17     360/360         create_histogram [3]
                0.03    0.00     360/360         read_pgm_file [5]
                0.01    0.00     331/46056       find_closest <cycle 1> [4]
-----------------------------------------------
[2]     96.7    1.18    0.00   46056+58965   <cycle 1 as a whole> [2]
                1.17    0.00   75537             find_closest <cycle 1> [4]
                0.01    0.00   29484             distance <cycle 1> [6]
-----------------------------------------------
                0.00    1.17     360/360         main [1]
[3]     96.0    0.00    1.17     360         create_histogram [3]
                1.17    0.00   45725/46056       find_closest <cycle 1> [4]
-----------------------------------------------
                               29481             distance <cycle 1> [6]
                0.01    0.00     331/46056       main [1]
                1.17    0.00   45725/46056       create_histogram [3]
[4]     95.9    1.17    0.00   75537         find_closest <cycle 1> [4]
                               29484             distance <cycle 1> [6]
-----------------------------------------------
                0.03    0.00     360/360         main [1]
[5]      2.5    0.03    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               29484             find_closest <cycle 1> [4]
[6]      0.8    0.01    0.00   29484         distance <cycle 1> [6]
                               29481             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [4] find_closest            [2] <cycle 1>
   [3] create_histogram        [1] main
   [6] distance                [5] read_pgm_file
18.15.txt		18		13
Accuracy: 233 correct answers for 234 tests Parallel
Total runtime: 5.325539
Sequential runtime: 2.370512
Results for k=7
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 90.86      1.08     1.08    85299     0.01     0.01  find_closest
  9.25      1.19     0.11      360     0.31     0.31  read_pgm_file
  0.00      1.19     0.00    29484     0.00     0.00  distance
  0.00      1.19     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      1.19     0.00      360     0.00     2.99  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.84% of 1.19 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.19                 main [1]
                0.00    1.08     360/360         create_histogram [4]
                0.11    0.00     360/360         read_pgm_file [5]
                0.01    0.00     325/58061       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     90.8    1.08    0.00   58061+56722   <cycle 1 as a whole> [2]
                1.08    0.00   85299             find_closest <cycle 1> [3]
                0.00    0.00   29484             distance <cycle 1> [6]
-----------------------------------------------
                               27238             distance <cycle 1> [6]
                0.01    0.00     325/58061       main [1]
                1.08    0.00   57736/58061       create_histogram [4]
[3]     90.8    1.08    0.00   85299         find_closest <cycle 1> [3]
                               29484             distance <cycle 1> [6]
-----------------------------------------------
                0.00    1.08     360/360         main [1]
[4]     90.2    0.00    1.08     360         create_histogram [4]
                1.08    0.00   57736/58061       find_closest <cycle 1> [3]
-----------------------------------------------
                0.11    0.00     360/360         main [1]
[5]      9.2    0.11    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               29484             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   29484         distance <cycle 1> [6]
                               27238             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
18.15.txt		18		13
Accuracy: 233 correct answers for 234 tests Parallel
Total runtime: 8.199673
Sequential runtime: 2.228595
Results for k=7
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 94.64      1.21     1.21    93472     0.01     0.01  find_closest
  3.13      1.25     0.04      360     0.11     0.11  read_pgm_file
  1.56      1.27     0.02      360     0.06     3.43  create_histogram
  0.78      1.28     0.01    29484     0.00     0.00  distance
  0.00      1.28     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.78% of 1.28 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.28                 main [1]
                0.02    1.21     360/360         create_histogram [2]
                0.04    0.00     360/360         read_pgm_file [5]
                0.01    0.00     363/64058       find_closest <cycle 1> [4]
-----------------------------------------------
                0.02    1.21     360/360         main [1]
[2]     96.3    0.02    1.21     360         create_histogram [2]
                1.21    0.00   63695/64058       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     95.3    1.22    0.00   64058+58898   <cycle 1 as a whole> [3]
                1.21    0.00   93472             find_closest <cycle 1> [4]
                0.01    0.00   29484             distance <cycle 1> [6]
-----------------------------------------------
                               29414             distance <cycle 1> [6]
                0.01    0.00     363/64058       main [1]
                1.21    0.00   63695/64058       create_histogram [2]
[4]     94.5    1.21    0.00   93472         find_closest <cycle 1> [4]
                               29484             distance <cycle 1> [6]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      3.1    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               29484             find_closest <cycle 1> [4]
[6]      0.8    0.01    0.00   29484         distance <cycle 1> [6]
                               29414             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
18.15.txt		18		13
Accuracy: 233 correct answers for 234 tests Parallel
Total runtime: 9.482428
Sequential runtime: 2.148534
Results for k=7
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 90.28      1.01     1.01    93734     0.01     0.01  find_closest
  8.05      1.10     0.09      360     0.25     0.28  read_pgm_file
  0.89      1.11     0.01      360     0.03     0.03  alloc_2d_matrix
  0.89      1.12     0.01      360     0.03     2.82  create_histogram
  0.00      1.12     0.00    29484     0.00     0.00  distance

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.89% of 1.12 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.12                 main [1]
                0.01    1.01     360/360         create_histogram [2]
                0.09    0.01     360/360         read_pgm_file [5]
                0.01    0.00     364/64377       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    1.01     360/360         main [1]
[2]     90.6    0.01    1.01     360         create_histogram [2]
                1.01    0.00   64013/64377       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     90.2    1.01    0.00   64377+58841   <cycle 1 as a whole> [3]
                1.01    0.00   93734             find_closest <cycle 1> [4]
                0.00    0.00   29484             distance <cycle 1> [7]
-----------------------------------------------
                               29357             distance <cycle 1> [7]
                0.01    0.00     364/64377       main [1]
                1.01    0.00   64013/64377       create_histogram [2]
[4]     90.2    1.01    0.00   93734         find_closest <cycle 1> [4]
                               29484             distance <cycle 1> [7]
-----------------------------------------------
                0.09    0.01     360/360         main [1]
[5]      8.9    0.09    0.01     360         read_pgm_file [5]
                0.01    0.00     360/360         alloc_2d_matrix [6]
-----------------------------------------------
                0.01    0.00     360/360         read_pgm_file [5]
[6]      0.9    0.01    0.00     360         alloc_2d_matrix [6]
-----------------------------------------------
                               29484             find_closest <cycle 1> [4]
[7]      0.0    0.00    0.00   29484         distance <cycle 1> [7]
                               29357             find_closest <cycle 1> [4]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] alloc_2d_matrix         [7] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
18.15.txt		18		13
Accuracy: 233 correct answers for 234 tests Parallel
Total runtime: 16.811862
Sequential runtime: 2.359519
Results for k=7
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 96.35      1.28     1.28    93526     0.01     0.01  find_closest
  3.76      1.33     0.05      360     0.14     0.14  read_pgm_file
  0.00      1.33     0.00    29484     0.00     0.00  distance
  0.00      1.33     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      1.33     0.00      360     0.00     3.54  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.75% of 1.33 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.33                 main [1]
                0.00    1.27     360/360         create_histogram [4]
                0.05    0.00     360/360         read_pgm_file [5]
                0.01    0.00     363/64149       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     96.2    1.28    0.00   64149+58861   <cycle 1 as a whole> [2]
                1.28    0.00   93526             find_closest <cycle 1> [3]
                0.00    0.00   29484             distance <cycle 1> [6]
-----------------------------------------------
                               29377             distance <cycle 1> [6]
                0.01    0.00     363/64149       main [1]
                1.27    0.00   63786/64149       create_histogram [4]
[3]     96.2    1.28    0.00   93526         find_closest <cycle 1> [3]
                               29484             distance <cycle 1> [6]
-----------------------------------------------
                0.00    1.27     360/360         main [1]
[4]     95.7    0.00    1.27     360         create_histogram [4]
                1.27    0.00   63786/64149       find_closest <cycle 1> [3]
-----------------------------------------------
                0.05    0.00     360/360         main [1]
[5]      3.8    0.05    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               29484             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   29484         distance <cycle 1> [6]
                               29377             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
Accuracy: 180 correct answers for 180 tests Parallel
Total runtime: 2.631437
Sequential runtime: 1.809367
Results for k=10
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 88.15      0.81     0.81    96844     0.01     0.01  find_closest
 11.97      0.92     0.11      360     0.31     0.31  read_pgm_file
  0.00      0.92     0.00    32400     0.00     0.00  distance
  0.00      0.92     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.92     0.00      360     0.00     2.24  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.09% of 0.92 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.92                 main [1]
                0.00    0.81     360/360         create_histogram [4]
                0.11    0.00     360/360         read_pgm_file [5]
                0.00    0.00     364/64444       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     88.0    0.81    0.00   64444+64800   <cycle 1 as a whole> [2]
                0.81    0.00   96844             find_closest <cycle 1> [3]
                0.00    0.00   32400             distance <cycle 1> [6]
-----------------------------------------------
                               32400             distance <cycle 1> [6]
                0.00    0.00     364/64444       main [1]
                0.81    0.00   64080/64444       create_histogram [4]
[3]     88.0    0.81    0.00   96844         find_closest <cycle 1> [3]
                               32400             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.81     360/360         main [1]
[4]     87.5    0.00    0.81     360         create_histogram [4]
                0.81    0.00   64080/64444       find_closest <cycle 1> [3]
-----------------------------------------------
                0.11    0.00     360/360         main [1]
[5]     12.0    0.11    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               32400             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   32400         distance <cycle 1> [6]
                               32400             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
Accuracy: 180 correct answers for 180 tests Parallel
Total runtime: 3.204545
Sequential runtime: 1.899748
Results for k=10
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.76      0.88     0.88    24887     0.04     0.04  find_closest
  4.35      0.92     0.04      360     0.11     0.11  read_pgm_file
  0.00      0.92     0.00    32400     0.00     0.00  distance
  0.00      0.92     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      0.92     0.00      360     0.00     2.41  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.09% of 0.92 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.92                 main [1]
                0.00    0.87     360/360         create_histogram [4]
                0.04    0.00     360/360         read_pgm_file [5]
                0.01    0.00     300/18847       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     95.7    0.88    0.00   18847+38440   <cycle 1 as a whole> [2]
                0.88    0.00   24887             find_closest <cycle 1> [3]
                0.00    0.00   32400             distance <cycle 1> [6]
-----------------------------------------------
                                6040             distance <cycle 1> [6]
                0.01    0.00     300/18847       main [1]
                0.87    0.00   18547/18847       create_histogram [4]
[3]     95.7    0.88    0.00   24887         find_closest <cycle 1> [3]
                               32400             distance <cycle 1> [6]
-----------------------------------------------
                0.00    0.87     360/360         main [1]
[4]     94.1    0.00    0.87     360         create_histogram [4]
                0.87    0.00   18547/18847       find_closest <cycle 1> [3]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      4.3    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               32400             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   32400         distance <cycle 1> [6]
                                6040             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
Accuracy: 180 correct answers for 180 tests Parallel
Total runtime: 6.378205
Sequential runtime: 2.671091
Results for k=10
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 94.28      1.13     1.13    94787     0.01     0.01  find_closest
  5.01      1.19     0.06      360     0.17     0.17  read_pgm_file
  0.83      1.20     0.01      360     0.03     3.16  create_histogram
  0.00      1.20     0.00    32400     0.00     0.00  distance
  0.00      1.20     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.83% of 1.20 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.20                 main [1]
                0.01    1.13     360/360         create_histogram [2]
                0.06    0.00     360/360         read_pgm_file [5]
                0.01    0.00     292/62456       find_closest <cycle 1> [4]
-----------------------------------------------
                0.01    1.13     360/360         main [1]
[2]     94.6    0.01    1.13     360         create_histogram [2]
                1.13    0.00   62164/62456       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     94.2    1.13    0.00   62456+64731   <cycle 1 as a whole> [3]
                1.13    0.00   94787             find_closest <cycle 1> [4]
                0.00    0.00   32400             distance <cycle 1> [6]
-----------------------------------------------
                               32331             distance <cycle 1> [6]
                0.01    0.00     292/62456       main [1]
                1.13    0.00   62164/62456       create_histogram [2]
[4]     94.2    1.13    0.00   94787         find_closest <cycle 1> [4]
                               32400             distance <cycle 1> [6]
-----------------------------------------------
                0.06    0.00     360/360         main [1]
[5]      5.0    0.06    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               32400             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   32400         distance <cycle 1> [6]
                               32331             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
Accuracy: 180 correct answers for 180 tests Parallel
Total runtime: 8.492361
Sequential runtime: 2.202061
Results for k=10
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 94.51      1.18     1.18    96373     0.01     0.01  find_closest
  3.20      1.22     0.04      360     0.11     0.11  read_pgm_file
  1.60      1.24     0.02      360     0.06     3.32  create_histogram
  0.80      1.25     0.01                             main
  0.00      1.25     0.00    32400     0.00     0.00  distance
  0.00      1.25     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.80% of 1.25 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.01    1.24                 main [1]
                0.02    1.17     360/360         create_histogram [2]
                0.04    0.00     360/360         read_pgm_file [5]
                0.01    0.00     363/64089       find_closest <cycle 1> [4]
-----------------------------------------------
                0.02    1.17     360/360         main [1]
[2]     95.5    0.02    1.17     360         create_histogram [2]
                1.17    0.00   63726/64089       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     94.4    1.18    0.00   64089+64684   <cycle 1 as a whole> [3]
                1.18    0.00   96373             find_closest <cycle 1> [4]
                0.00    0.00   32400             distance <cycle 1> [6]
-----------------------------------------------
                               32284             distance <cycle 1> [6]
                0.01    0.00     363/64089       main [1]
                1.17    0.00   63726/64089       create_histogram [2]
[4]     94.4    1.18    0.00   96373         find_closest <cycle 1> [4]
                               32400             distance <cycle 1> [6]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      3.2    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               32400             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   32400         distance <cycle 1> [6]
                               32284             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [4] find_closest            [3] <cycle 1>
   [2] create_histogram        [1] main
   [6] distance                [5] read_pgm_file
Accuracy: 180 correct answers for 180 tests Parallel
Total runtime: 10.035963
Sequential runtime: 2.130813
Results for k=10
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 96.37      1.03     1.03    96722     0.01     0.01  find_closest
  3.74      1.07     0.04      360     0.11     0.11  read_pgm_file
  0.00      1.07     0.00    32400     0.00     0.00  distance
  0.00      1.07     0.00      360     0.00     0.00  alloc_2d_matrix
  0.00      1.07     0.00      360     0.00     2.85  create_histogram

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.93% of 1.07 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.07                 main [1]
                0.00    1.03     360/360         create_histogram [4]
                0.04    0.00     360/360         read_pgm_file [5]
                0.01    0.00     364/64375       find_closest <cycle 1> [3]
-----------------------------------------------
[2]     96.3    1.03    0.00   64375+64747   <cycle 1 as a whole> [2]
                1.03    0.00   96722             find_closest <cycle 1> [3]
                0.00    0.00   32400             distance <cycle 1> [6]
-----------------------------------------------
                               32347             distance <cycle 1> [6]
                0.01    0.00     364/64375       main [1]
                1.03    0.00   64011/64375       create_histogram [4]
[3]     96.3    1.03    0.00   96722         find_closest <cycle 1> [3]
                               32400             distance <cycle 1> [6]
-----------------------------------------------
                0.00    1.03     360/360         main [1]
[4]     95.7    0.00    1.03     360         create_histogram [4]
                1.03    0.00   64011/64375       find_closest <cycle 1> [3]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      3.7    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               32400             find_closest <cycle 1> [3]
[6]      0.0    0.00    0.00   32400         distance <cycle 1> [6]
                               32347             find_closest <cycle 1> [3]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [4] create_histogram        [3] find_closest            [2] <cycle 1>
Accuracy: 180 correct answers for 180 tests Parallel
Total runtime: 17.500558
Sequential runtime: 2.343334
Results for k=10
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 95.70      1.30     1.30    96323     0.01     0.01  find_closest
  2.94      1.34     0.04      360     0.11     0.11  read_pgm_file
  1.47      1.36     0.02      360     0.06     3.65  create_histogram
  0.00      1.36     0.00    32400     0.00     0.00  distance
  0.00      1.36     0.00      360     0.00     0.00  alloc_2d_matrix

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.73% of 1.36 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    1.36                 main [1]
                0.02    1.29     360/360         create_histogram [2]
                0.04    0.00     360/360         read_pgm_file [5]
                0.01    0.00     363/64073       find_closest <cycle 1> [4]
-----------------------------------------------
                0.02    1.29     360/360         main [1]
[2]     96.5    0.02    1.29     360         create_histogram [2]
                1.29    0.00   63710/64073       find_closest <cycle 1> [4]
-----------------------------------------------
[3]     95.6    1.30    0.00   64073+64650   <cycle 1 as a whole> [3]
                1.30    0.00   96323             find_closest <cycle 1> [4]
                0.00    0.00   32400             distance <cycle 1> [6]
-----------------------------------------------
                               32250             distance <cycle 1> [6]
                0.01    0.00     363/64073       main [1]
                1.29    0.00   63710/64073       create_histogram [2]
[4]     95.6    1.30    0.00   96323         find_closest <cycle 1> [4]
                               32400             distance <cycle 1> [6]
-----------------------------------------------
                0.04    0.00     360/360         main [1]
[5]      2.9    0.04    0.00     360         read_pgm_file [5]
                0.00    0.00     360/360         alloc_2d_matrix [7]
-----------------------------------------------
                               32400             find_closest <cycle 1> [4]
[6]      0.0    0.00    0.00   32400         distance <cycle 1> [6]
                               32250             find_closest <cycle 1> [4]
-----------------------------------------------
                0.00    0.00     360/360         read_pgm_file [5]
[7]      0.0    0.00    0.00     360         alloc_2d_matrix [7]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [7] alloc_2d_matrix         [6] distance                [5] read_pgm_file
   [2] create_histogram        [4] find_closest            [3] <cycle 1>
